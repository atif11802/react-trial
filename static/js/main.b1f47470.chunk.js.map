{"version":3,"sources":["recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","images","ingredient","className","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","map","recipe","label","image","ingredientLines","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAceA,EAZA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,OAAOC,EAAgB,EAAhBA,WACnC,OACI,sBAAKC,UAAU,cAAf,UACI,6BAAKJ,IACL,4CAAeC,KACf,qBAAKI,IAAKH,EAAQI,IAAI,SACtB,gDAAmBN,KACnB,4BAAIG,QCsDDI,MA3Df,WACE,IADa,EAIaC,mBAAS,IAJtB,mBAIPC,EAJO,KAICC,EAJD,OAKWF,mBAAS,IALpB,mBAKPG,EALO,KAKAC,EALA,OAMSJ,mBAAS,WANlB,mBAMPK,EANO,KAMDC,EANC,KAWbC,qBAAY,WACVC,MACE,CAACH,IAIL,IAAMG,EAAU,uCAAE,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAjBjB,WAiBiB,oBAhBhB,qCAeI,cACVM,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJD,2CAAF,qDAsBhB,OACE,sBAAKlB,UAAU,MAAf,UACE,uBAAMqB,SAVO,SAAAC,GACfA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAOmBR,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAYwB,KAAK,OAAOC,MAAOlB,EAChDmB,SAlBa,SAAAJ,GACjBd,EAAUc,EAAEK,OAAOF,UAkBf,wBAAQzB,UAAU,gBAAgBwB,KAAK,SAAvC,uBAEDnB,EAAQuB,KAAI,SAAAC,GAAM,OACjB,cAAC,EAAD,CAEAjC,MAAOiC,EAAOA,OAAOC,MACrBjC,SAAUgC,EAAOA,OAAOhC,SACxBC,OAAQ+B,EAAOA,OAAOE,MACtBhC,WAAY8B,EAAOA,OAAOG,iBAJrBH,EAAOA,OAAOC,cCxCZG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b1f47470.chunk.js","sourcesContent":["import './App.css';\r\n\r\nconst Recipe = ({title,calories,images,ingredient}) => {\r\n    return ( \r\n        <div className=\"recipe-item\">\r\n            <h1>{title}</h1>\r\n            <p>calorie is {calories}</p>\r\n            <img src={images} alt=\"food\"/>\r\n            <h2>ingredient of {title}</h2>\r\n            <p>{ingredient}</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Recipe;\r\n","import {useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from './recipe';\n\nfunction App() {\n  const APP_ID='b9c87afa';\n  const APP_KEY='9d85af9be209bc6bec98dac606dbf3fd';\n  \n  const[recipes,setRecipes]=useState([]);\n  const[search,setSearch]=useState('');\n  const[query,setQuery]=useState('chicken');\n\n\n\n \n  useEffect(  () => {\n    getRecipes();\n    },[query]);\n\n\n\n  const getRecipes= async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n    \n  }\n\n  let updateSearch = e =>{\n    setSearch(e.target.value);\n  \n  }\n\n\n  const getSearch= e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className='search-form'>\n        <input className='search-bar'type=\"text\" value={search}\n        onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">search</button>\n      </form>\n      {recipes.map(recipe=>(\n        <Recipe \n        key={recipe.recipe.label} \n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories} \n        images={recipe.recipe.image} \n        ingredient={recipe.recipe.ingredientLines}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}